/*
 * Decompiled with CFR 0.152.
 */
package heaven.main.module.modules.misc;

import heaven.main.event.EventHandler;
import heaven.main.event.events.world.EventPacketReceive;
import heaven.main.module.Module;
import heaven.main.module.ModuleType;
import heaven.main.utils.chat.Helper;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import net.minecraft.client.Minecraft;
import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S18PacketEntityTeleport;
import net.minecraft.network.play.server.S27PacketExplosion;
import net.minecraft.network.play.server.S2APacketParticles;
import net.minecraft.network.play.server.S2BPacketChangeGameState;
import net.minecraft.network.play.server.S33PacketUpdateSign;
import net.minecraft.network.play.server.S43PacketCamera;
import net.minecraft.network.play.server.S48PacketResourcePackSend;
import net.minecraft.util.IChatComponent;

public class AntiExploit
extends Module {
    private final Pattern pattern = Pattern.compile(".*\\$\\{[^}]*}.*");

    public AntiExploit() {
        super("AntiExploit", ModuleType.Misc);
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    @EventHandler
    public void checkExploit(EventPacketReceive e) {
        if (e.getPacket() instanceof S27PacketExplosion) {
            S27PacketExplosion packet = (S27PacketExplosion)e.packet;
            if (Math.abs(packet.field_149152_f) > 99.0f || Math.abs(packet.field_149153_g) > 99.0f || Math.abs(packet.field_149159_h) > 99.0f) {
                this.processExploit("Explosion", "A");
                e.setCancelled(true);
                return;
            } else {
                if (!(Math.abs(packet.getStrength()) > 99.0f)) return;
                this.processExploit("Explosion", "B");
                e.setCancelled(true);
            }
            return;
        }
        if (e.getPacket() instanceof S02PacketChat) {
            S02PacketChat packet = (S02PacketChat)e.packet;
            Matcher matcher = this.pattern.matcher(packet.getChatComponent().getUnformattedText().toLowerCase());
            if (!matcher.find()) return;
            this.processExploit("Log4j", "A");
            e.setCancelled(true);
            return;
        }
        if (e.getPacket() instanceof S18PacketEntityTeleport) {
            S18PacketEntityTeleport packet = (S18PacketEntityTeleport)e.packet;
            if (Math.abs(packet.getX()) <= 29999984 && Math.abs(packet.getZ()) <= 29999984 && Math.abs(packet.getY()) <= 29999984) return;
            this.processExploit("Teleport", "A");
            e.setCancelled(true);
            return;
        }
        if (e.getPacket() instanceof S2APacketParticles) {
            S2APacketParticles packet = (S2APacketParticles)e.packet;
            if (Math.abs(packet.getParticleSpeed()) > 10.0f) {
                this.processExploit("Particle", "A");
                e.setCancelled(true);
                return;
            } else {
                if (packet.getParticleCount() <= 500) return;
                this.processExploit("Particle", "B");
                e.setCancelled(true);
            }
            return;
        }
        if (e.getPacket() instanceof S2BPacketChangeGameState) {
            S2BPacketChangeGameState packet = (S2BPacketChangeGameState)e.packet;
            if (packet.getGameState() <= 5 || !(packet.func_149137_d() > 99.0f) && packet.getGameState() <= 99) return;
            this.processExploit("GameState", "A");
            e.setCancelled(true);
            return;
        }
        if (e.getPacket() instanceof S33PacketUpdateSign) {
            S33PacketUpdateSign packet = (S33PacketUpdateSign)e.packet;
            for (IChatComponent line : packet.getLines()) {
                if (Minecraft.fontRendererObj.getStringWidth(line.getUnformattedText()) <= 100) continue;
                this.processExploit("Sign", "A");
                e.setCancelled(true);
                return;
            }
            return;
        }
        if (e.getPacket() instanceof S43PacketCamera) {
            if (Minecraft.thePlayer.isSpectator()) return;
            this.processExploit("Camera", "A");
            e.setCancelled(true);
            return;
        } else {
            if (!(e.getPacket() instanceof S48PacketResourcePackSend)) return;
            S48PacketResourcePackSend packet = (S48PacketResourcePackSend)e.packet;
            try {
                URI uri = new URI(packet.getURL());
                String scheme = uri.getScheme();
                boolean isLevelProtocol = "level".equalsIgnoreCase(scheme);
                boolean isHttpProtocol = "http".equalsIgnoreCase(scheme);
                boolean isHttpsProtocol = "https".equalsIgnoreCase(scheme);
                if (!(isHttpProtocol || isHttpsProtocol || isLevelProtocol)) {
                    this.processExploit("ResourcePack", "A");
                    Minecraft.thePlayer.sendQueue.getNetworkManager().sendPacket(new C19PacketResourcePackStatus(packet.getHash(), C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                    e.setCancelled(true);
                }
                if (!isLevelProtocol || !packet.getURL().contains("..") && packet.getURL().endsWith("/resources.zip")) return;
                this.processExploit("ResourcePack", "B");
                Minecraft.thePlayer.sendQueue.getNetworkManager().sendPacket(new C19PacketResourcePackStatus(packet.getHash(), C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                e.setCancelled(true);
                return;
            }
            catch (URISyntaxException exception) {
                this.processExploit("ResourcePack", "C");
                Minecraft.thePlayer.sendQueue.getNetworkManager().sendPacket(new C19PacketResourcePackStatus(packet.getHash(), C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                e.setCancelled(true);
            }
        }
    }

    public void processExploit(String module, String type) {
        Helper.sendMessage("The server tried to send exploit packet: " + module + " (type:" + type + ")");
    }
}

